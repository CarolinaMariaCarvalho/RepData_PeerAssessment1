flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_valsfunction(elem)elem[2])
lapply(unique_vals,function(elem)elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,charcter(1))
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$lanimate)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data("iris")
data(iris)
view(iris)
iris
tapply(iris$Sepal.Length,iris$virginica,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
head(mtcars)
with(mtcars(apply(mpg,cyl,mean)))
with(mtcars,apply(mpg,cyl,mean))
sapply(split(mtcars$mpg,mtcars$cyl),mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$cyl,mtcars$hp,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
with(mtcars,tapply(mtg,cyl,mean))
with(mtcars,tapply(mpg,cyl,mean))
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x=1:4,2,2)
makeCacheMatrix(x=1:4)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x=1:4)
makeCacheMatrix(x=1:4,nrow=2,ncol=2)
makeCacheMatrix(x=Matrix(1:4,nrow=2,ncol=2))
makeCacheMatrix(x=matrix(1:4,nrow=2,ncol=2))
y<-makeCacheMatrix(x=matrix(1:4,nrow=2,ncol=2))
y
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x=matrix(1:4,nrow=2,ncol=2))
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x=matrix(1:4,nrow=2,ncol=2))
y
options(width=80)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
x<-matrix(1:4,2,2)
x
makeCacheMatrix(x)
y
cacheSolve(x)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
z<-matrix(1:6,2,3)
cacheSolve(z)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
invert
y
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
invert
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
invert
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
invert
x<-matrix(1:4,2,2)
x
makeCacheMatrix(x)
invert
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
x
makeCacheMatrix(x)
y
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
z
makeCacheMatrix(z)
z<-matrix(1:9,3,3)
makeCacheMatrix(z)
z<-matrix(1:16,4,4)
z
makeCacheMatrix(z)
z<-matrix(1:4,2,2)
z
makeCacheMatrix(x)
makeCacheMatrix(z)
i
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(z)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
y<-matrix(1:9,3,3)
y
cacheSolve(y)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(y)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x1<-c(1:4)
makeVector(x1)
cachemean(x1)
x1<-c(2,5,6,7)
makeVector(x1)
cachemean(x1)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x1<-1:4
makeVector(x1)
makevector(x=1:4)
makeVector(x=1:4)
makeVector(x=c(1,2,3))
cachemean(x)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
i
clear()
rm()
i
rm(list=ls())
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
x<-matrix(1:4,2,2)
cacheSolve(x)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
invert
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
makeVector(numeric(1:4))
x<-numeric(1:4)
x<-numeric(1:4,length=4)
x<-numeric(length=4)
makeVector(x)
cachemean(x)
source('~/.active-rstudio-document')
x<-numeric(length=4)
cachemean(x)
source('~/.active-rstudio-document')
x<-numeric(length=4)
cachemean(x)
makeVector(x)
cachemean(x)
y<-numeric(length=5)
cachemean(y)
y<-c(1,2,3,4,5)
cachemean(y)
rm(list=ls())
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
y<-c(1,2,3,4,5)
cachemean(y)
a<-matrix(1:4,2,2)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(a)
cacheSolve(a)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
setMatrix <- function(newValue) {
x <<- newValue
cache <<- NULL
}
getMatrix <- function() {
x
}
cacheInverse <- function(solve) {
cache <<- solve
}
getInverse <- function() {
cache
}
list(setMatrix = setMatrix, getMatrix = getMatrix, cacheInverse = cacheInverse, getInverse = getInverse)
}
x<-matrix(1:4,2,2)
makeCacheMatrix(x)
cacheSolve <- function(y, ...) {
inverse <- y$getInverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- y$getMatrix()
inverse <- solve(data)
y$cacheInverse(inverse)
inverse
}
}
cacheSolve <- function(y, ...) {
inverse <- y$getInverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- y$getMatrix()
inverse <- solve(data)
y$cacheInverse(inverse)
inverse
}
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
invMatrix <- NULL
getInv <- function() invMatrix
setInv <- function(inv) {invMatrix <<- inv}
set <- function(newMatrix) x <<- newMatrix
get <- function() x
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
makeCacheMAtrix(x=matrix(1:4,2,2))
makeCacheMatrix(x=matrix(1:4,2,2))
cacheSolve <- function(x, ...)m <-  {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInv()
if(is.null(invMatrix)){
invMatrix <- solve(x$get())
x$setInv(invMatrix)
} else{
invMatrix <- x$getInv()
}
print(invMatrix)
}
x<-matrix(1:4,2,2)
makeCacheMatrix(x)
cacheSolve(x)
x
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x)
setinverse
m
y
m
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
x<-matrix(1:4,2,2)
makeCacheMatrix(x)
cacheSolve(x)
z<-matrix(1:9,3,3)
cacheSolve(z)
makeCacheMatrix(z)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
rm(list=ls())
x
x<-matrix(1:4,2,2)
makeCacheMatrix(x)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
cacheSolve(x)
exists(d)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
y<-matrix(data=c(2,4,6,8),2,2)
y
cacheSolve(y)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
rm(list=ls())
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
x<-matrix(1:4,2,2)
makeCacheMatrix(x)
i
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
i==solve(x)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
rm(list=ls())
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
x<-matrix(1:4,2,2)
makeCacheMatrix(x)
cacheSolve(x)
z<-matrix(2:5,2,2)
cacheSolve(z)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
rm(list=ls())
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
x<-matrix(1:4,2,2)
makeCacheMatrix(x)
cacheSolve(x)
z<-matrix(2:5,2,2)
cacheSolve(z)
y<-matrix(data=c(1,3,5,7),2,2)
y
cacheSolve(y)
d
head(y)
d==head(y)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
rm(list=ls())
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
x<-matrix(1:4,2,2)
makeCacheMatrix(x)
cacheSOlve
cacheSolve(x)
z<-matrix(2:5,2,2)
cacheSolve(z)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
rm(list=ls())
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
x<-,atrix(1:4,2,2)
x<-matrix(1:4,2,2)
makeCacheMatrix(x)
cacheSolve(x)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
z<-matrix(2:5,2,2)
cacheSolve(z)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
x<-matrix(1:4,2,2)
cacheSolve(x)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
x<-matrix(1:4,2,2)
cacheSolve(x)
cacheSolve2(x)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve2(x)
z<-matrix(2:5,2,2)
makeCacheMatrix2(z)
cacheSolve2(z)
source('C:/Users/Carolina/Desktop/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve2(z)
install.packages("xlsx")
install.packages("XML")
install.packages("jsonlite")
install.packages("data.table")
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(xlsx)
install.packages("tidyr")
library(swirl)
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package)
summarize(by_package,mean(size))
count=n()
count<-n()
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,count>679)
top:counts
top_counts
View(top_counts)
top_counts_sorted(top_counts,count())
top_counts_sorted(top_counts,count
)
top_counts_sorted<- arrange(top_counts,count)
top_counts_sorted<- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
exit()
0
library(swirl)
swirl()
?gather
gather(students,sex,count,-grade)
View(students)
students2
res<-gather(students2,sex_class,count)
res<-gather(students2,sex_class,count,-grade)
res
?seprarate
?separate
separate(res,sex_class,into=c("sex","class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
library(readr)
parse_number("class_5")
parse_number("class5")
submit()
students4
submit()
submit
submit()
submit()
passed
failed
mutate(passed,rep("passed"))
passed<-passed%>%mutate(status="passed")
failed<-failed%>%mutate(status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
tug(ppm)
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=12,lwd=4)
abline(v=meadian(ppm),col="magenta",lwd=4)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
table(region)
table(ppm$region)
table(pollution$region)
reg<-table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution,region=="east")
head(east)
exit()
0
info()
bye()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(knitr)
setwd("C:/Users/Carolina/Desktop/Data Science/Reproducible Research/Assignment 1")
knit2html("PA1_template.Rmd",output="PA1_template.html")
knit("PA1_template.Rmd")
knit("PA1_template.Rmd",output=NULL)
